 /* jshint maxlen: 300 */
 const TelegramBot = require('node-telegram-bot-api');
 const fs = require('fs');
 const {
   weather,
   randomize,
   isWorkingTime,
   isdbName,
   url,
   token,
   basicauth,
   InlineKB,
   ButtonStartMenu,
   GetNameDB,
   DateMod,
   GetPackResults,
   GetCurDay,
   GetPeriodBack
   
 } = require('./HTML training/testexport');
 const {
   Console
 } = require('console');
 const bot = new TelegramBot(token, {
   polling: true
 });
 let databurn, phone, list, ordertime, namer, homeadress, orderphone, ordernumclient, trimmedStr;
 let today = new Date();
 let curyear = today.getFullYear();
 let outputdate, countcode = 0;
 let actualid, textid;
 let DateRegularexp = /(\d{2})\/(\d{2})\/(\d{4})/;
 let BurnTriger = false;
 let PhoneTriger = false;
 let intervalId = 0;
 let ArrayCheckAnalyze = [];
 let timepause = 10000; // 900000;
 let ii = true;
 const intervals = {};
 let isAlreadySent = false;

 let getWorkperiodstatus;
 console.log('–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç MTS Clinic - –∑–∞–ø—É—â–µ–Ω–æ');
 bot.onText(DateRegularexp, (msg) => {
  databurn = null;
   databurn = msg.text;
   actualid = msg.chat.id;

   if (phone == undefined) {
     bot.sendMessage(msg.chat.id, `–î—è–∫—É—î–º–æ! –í–∞—à–∞ –¥–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${databurn}`, GetKeyboardonlyBurn(databurn));
   } else {
     bot.sendMessage(msg.chat.id, `–î—è–∫—É—î–º–æ! –í–∞—à–∞ –¥–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${databurn}`, GetKeyboradBurnandPhone(phone, databurn));
     isdbName(actualid, Number(phone.slice(-10)), DateMod(databurn), GetPeriodBack(100), GetCurDay());
   }



   if (BurnTriger == true) {
     bot.sendMessage(msg.chat.id, `–¢–µ–ø–µ—Ä –ø–æ–ø—Ä–æ—à—É –í–∞—Å –Ω–∞–¥–∞—Ç–∏ –¥–æ–∑–≤—ñ–ª –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –í–∞—à–æ–≥–æ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É , —â–æ –∑'—è–≤–∏–ª–∞—Å—è –ø—ñ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥—É.`, {
       reply_markup: {
         keyboard: [
           [{
             text: '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É',
             request_contact: true,




             // –í–º–∏–∫–∞—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É
           }]


         ],

         resize_keyboard: false

         // –í–º–∏–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–º–µ–Ω—à–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
       }
     });
   }







 });
 async function requestdata(msg, newac, newaca = newac) {


   bot.sendMessage(msg, `–ü–æ—á–∏–Ω–∞—é –ø–æ—à—É–∫ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É - —Ü–µ –æ–∫—Ä–µ–º—ñ —Ñ–∞–π–ª–∏ pdf —Ñ–æ—Ä–º–∞—Ç—É. –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ –∑–Ω–∞—á–Ω–∏–º. –ó–∞—á–µ–∫–∞–π—Ç–µ –ø–æ–≤–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É.`)



   await fetch(`${url}/custom/GetPatientExams?BurnDate=${outputdate}&PhoneNumber=${phone}&BegDate=${newaca}-01-01&EndDate=${newac}-12-31`, {
       headers: {
         // 'Authorization': 'Basic TWVkVGVjaHxNZWRUZWNoV2ViOk1lZFRlY2gxMjMh'
         'Authorization': basicauth
       }
     })
     .catch(error => {
       bot.sendMessage(msg, `–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.`);
     })
     .then(response => {
       //response.ok
       if (response) {
         response.json()
           .then(data => {

             const nameArray = data.length;

             if (nameArray == 0) {
               bot.sendMessage(msg, `–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É - –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ –í–∞—à–∏–º –¥–∞–Ω–∏–º. –í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—ó –ø–æ –í–∞—à–∏–º –Ω–∞–¥–∞–Ω–∏–º –¥–∞–Ω–∏–º.`);
             } else {
               const status = data[0].Docstatus;
               // if (status == '–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ'){
               bot.sendMessage(msg, `–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É - –∑–Ω–∞–π–¥–µ–Ω–æ ${nameArray} –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞ ${newac} —Ä—ñ–∫ –ø–æ –í–∞—à–∏–º –¥–∞–Ω–∏–º`, {
                 reply_markup: {
                   remove_keyboard: true
                 }
               });

               gruopresults(msg, nameArray, data);





             }
           });
       } else {
         bot.sendMessage(msg, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
       }



     });
 }


 async function gruopresults(msg, nameArray, data) {

   for (let i = 0; i <= nameArray - 1; i++) {

     console.log(data[i].WebCode);
     if (data[i].Docstatus == '–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ') {

       await fetch(`${url}/examination/getResultsPDF?ExaminationResultsPDFCode=${data[i].WebCode}&ShowOnlyReady=false`, {
           headers: {
             'Authorization': 'Basic TWVkVGVjaHxNZWRUZWNoV2ViOk1lZFRlY2gxMjMh'
           }
         })
         .then(res => res.arrayBuffer())
         .then(buffer => {
           const fileBufferpdf = Buffer.from(buffer);

           bot.sendDocument(msg, fileBufferpdf, {}, {
             filename: `${data[i].WebCode}.pdf`,
             contentType: 'application/pdf'
           })
           bot.sendMessage(msg, '–ó–∞–ø–∏—Å  ' + `${(i+1)}` + '      \n–î–∞—Ç–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è: ' + `${data[i].Date} \n–°—Ç–∞—Ç—É—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:  ${data[i].Docstatus}`)
             .catch({
               i
             });

         });

     }

     // setTimeout(()=>{
     // bot.sendMessage(msg, `üë©‚Äçüíª –í–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ —Ç–µ—Ä–ø—ñ–Ω–Ω—è.`);
     // },4000);

     //return true; 
     else {
       bot.sendMessage(msg, `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è  ${data[i].WebCode} –ø–æ–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è. `);
       console.log('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –ø—Ä–æ—Ü–µ—Å—ñ —Ä–æ–±–æ—Ç–∏');
     }
   }
 }


 bot.on('contact', (msg) => {
   phone = (msg.contact.phone_number).slice(-10); // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑ –æ–±'—î–∫—Ç—É contact
   if (databurn == undefined) {
     console.log('error data lost');
     bot.sendMessage(msg.chat.id, `–î—è–∫—É—î–º–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${phone}`, GetKeyboardPhone(phone));
   } else {
     bot.sendMessage(msg.chat.id, `–î—è–∫—É—î–º–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${phone}`, GetKeyboradBurnandPhone(phone, databurn));
     //----------------------—Ç—É —Ç—Ä–µ–±–∞ –≤—Å–∞—Ç–∏–≤–∏—Ç–∏ –æ–±—Ä–æ–±–∫—É –∑–∞–ø–∏—Ç—É –Ω–∞ —ñ–º—è
     isdbName(actualid, Number(phone.slice(-10)), DateMod(databurn), GetPeriodBack(100), GetCurDay());
     outputdate = DateMod(databurn);

   }



   //bot.sendMessage(msg.chat.id, `–î—è–∫—É—î–º–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${phone}`,GetKeybOnlyPhone); // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º

   if (PhoneTriger) {
     bot.sendMessage(msg.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥,—è–∫–∏–π –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:', {

       reply_markup: {
         inline_keyboard: [
           [{
             text: `1. ${curyear-3}`,
             callback_data: 'button12'
           }],
           [{
             text: `2. ${curyear-2}`,
             callback_data: 'button11'
           }],
           [{
             text: `3. ${curyear-1}`,
             callback_data: 'button9'
           }],
           [{
             text: `4. ${curyear}`,
             callback_data: 'button10'
           }],
           [{
             text: '5. –£—Å—ñ —Ä–æ–∫–∏',
             callback_data: 'button13'
           }]

         ],

       }


     });
   }







   console.log(outputdate);
   console.log(phone);











 });

 let GetKeybNull = {
   reply_markup: {
     keyboard: [
       [{
         text: '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É',
         request_contact: true
       }],




       // –í–º–∏–∫–∞—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É
       [`–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è`]


     ],
     resize_keyboard: true

   }
 };

 function GetKeyboardPhone(getphone) {
   const GetKeybOnlyPhone = {
     reply_markup: {
       keyboard: [
         [{
           text: `–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n ${getphone} `,
           request_contact: true
         }],




         // –í–º–∏–∫–∞—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É
         [`–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è`]


       ],
       resize_keyboard: true



     }
   };

   return GetKeybOnlyPhone;
 }

 function GetKeyboardonlyBurn(getburn) {
   const keyboardOnlyBurn = {
     reply_markup: {
       keyboard: [
         [{
           text: `'–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É' `,
           request_contact: true
         }],




         // –í–º–∏–∫–∞—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É
         [`–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: \n ${getburn}`]


       ],
       resize_keyboard: true



     }
   };
   return keyboardOnlyBurn;
 }

 function GetKeyboradBurnandPhone(getphone, getburn) {
   const keyboardPhoneandBurn = {
     reply_markup: {
       keyboard: [
         [{
           text: `–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n ${getphone} `,
           request_contact: true
         }],




         // –í–º–∏–∫–∞—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É
         [`–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: \n ${getburn}`]


       ],
       resize_keyboard: true



     }
   };
   return keyboardPhoneandBurn;
 }



 function stopInterval(chatId) {
   // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   if (chatId in intervals) {
     // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ intervals
     clearInterval(intervals[chatId]);
     delete intervals[chatId];

     // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
     bot.sendMessage(chatId, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ.');
   } else {
     // –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     bot.sendMessage(chatId, '–ù–µ–º–∞ –¥—ñ—é—á–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–∞.');
   }
 }



 async function getW(chatid, city) {
   weather(city)
     .then(data => {
       const getweasher = {
         latitude: data[0].lat,
         longitude: data[0].lon,
         city: data[0].local_names.uk,
         appid: '29ebfe90e8a43cfb861bd842ed6ca6f8'
       };
       return getweasher;
     })
     .catch(error => {
       // console.error(error);

     })
     .then(getweasher => fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${getweasher.latitude}&lon=${getweasher.longitude}&appid=${getweasher.appid}&units=metric&lang=ua`)
       .then(response => response.json())
       .then(data => {
           const now = new Date();
           const starttime = new Date();
           const hours = now.getHours();
           const day = now.getDay();
           const minute = now.getMinutes();
           starttime.setHours(8);
           starttime.setMinutes(0);

           switch (day + 1) {

             case 0:

               bot.sendMessage(chatid, 'üò¥ –°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–¥—ñ–ª—è. –ú–µ–¥–∏—á–Ω–∏–π —Ü–µ–Ω—Ç—Ä MTS Clinic - –∑–∞—á–∏–Ω–µ–Ω–æ.');
               break;
             case 1:
             case 2:
             case 3:
             case 4:
             case 5:
               if (hours < 18 && (now.getTime() >= starttime.getTime())) {

                 bot.sendMessage(chatid, ('üëâ –ú–∏, –Ω–∞—Ä–∞–∑—ñ –≤—ñ–¥—á–∏–Ω–µ–Ω—ñ.\n–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ: 08:00 - 18:00\n                    \n–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ. \n–°–ø–ª–∞–Ω—É–π—Ç–µ –¥–æ—Ä–æ–≥—É –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –¥–æ –Ω–∞—Å. \n                 \n–ó–∞—Ä–∞–∑ ' + Math.ceil(data.main.temp) + ' ¬∞–° –≤ –º—ñ—Å—Ç—ñ ' + getweasher.city + ' \n–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫:  ' + Math.round(data.main.feels_like) + ' ¬∞–°' + '\n' + ((data.weather[0].description).charAt(0).toUpperCase() + (data.weather[0].description).slice(-10))))



               } else {
                 bot.sendMessage(chatid, 'üò≠–ú–∏, –Ω–∞—Ä–∞–∑—ñ –∑–∞—á–∏–Ω–µ–Ω—ñ. –ê–ª–µ, –í–∏ –º–æ–∂–µ—Ç–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—å –Ω–∞—à–∏–º–∏ –æ–Ω–ª–∞–π–Ω-–ø–æ—Å–ª—É–≥–∞–º–∏.‚òù');
               }
               break;

             case 6:
               if (hours < 15 && hours >= 8) {
                 bot.sendMessage(chatid, ('üíâüî¨ü©∫üßë‚Äç‚öïÔ∏è\n–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ: 08:00 - 15:00\n–°–ø–ª–∞–Ω—É–π—Ç–µ –¥–æ—Ä–æ–≥—É –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –¥–æ –Ω–∞—Å.\n                 \n–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.\n–ó–∞—Ä–∞–∑ ' + Math.ceil(data.main.temp) + ' ¬∞–° –≤ –º—ñ—Å—Ç—ñ ' + getweasher.city + ' \n–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫:  ' + Math.round(data.main.feels_like) + ' ¬∞–°' + '\n' + ((data.weather[0].description).charAt(0).toUpperCase() + (data.weather[0].description).slice(-10))));
               } else {
                 bot.sendMessage(chatid, 'üò≠ –ú–∏, –Ω–∞—Ä–∞–∑—ñ –∑–∞—á–∏–Ω–µ–Ω—ñ. –ê–ª–µ, –í–∏ –º–æ–∂–µ—Ç–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—å –Ω–∞—à–∏–º–∏ –æ–Ω–ª–∞–π–Ω-–ø–æ—Å–ª—É–≥–∞–º–∏.‚òù');
               }
               break;





           }













           // bot.sendMessage(chatid,('–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ. \n–°–ø–ª–∞–Ω—É–π—Ç–µ –¥–æ—Ä–æ–≥—É –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –¥–æ –Ω–∞—Å. \n                 \n–ó–∞—Ä–∞–∑ ' + Math.ceil(data.main.temp)+ ' ¬∞–° –≤ –º—ñ—Å—Ç—ñ ' + getweasher.city  + ' \n–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫:  ' + Math.round(data.main.feels_like) + ' ¬∞–°'+ '\n' + ((data.weather[0].description).charAt(0).toUpperCase()+ (data.weather[0].description).slice(1) )))
         }


       ));
 }



 async function GetPdfCode(msg, webcode, count) {




   await fetch(`${url}/examination/getResultsPDF?ExaminationResultsPDFCode=${webcode}&ShowOnlyReady=false`, {
       headers: {
         'Authorization': 'Basic TWVkVGVjaHxNZWRUZWNoV2ViOk1lZFRlY2gxMjMh'
       }
     })
     .then(res => res.arrayBuffer())
     .then(buffer => {
       const fileBufferpdf = Buffer.from(buffer);

       bot.sendDocument(msg, fileBufferpdf, {}, {
           filename: `${webcode}.pdf`,
           contentType: 'application/pdf'
         })
         .then(setTimeout(() => {
           (bot.sendMessage(msg, '–í–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ')

           );
         }, 1500));
       countcode++;
       if (countcode == count) {
         clearInterval(intervalId);
         intervalId = 0;
       }

     });


   return true;





 }









 bot.on('message', (msg) => {
   const chatId = msg.chat.id;
   textid = msg.text;


   if (textid === '–ó—É–ø–∏–Ω–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥') {
     // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Å—É
     stopInterval(chatId);

   }








   if (msg.text === '–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è') {
     bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç—ñ –î–î/–ú–ú/–†–†–†–† - –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤–∞—Å –≤ –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—ó MTS Clinic');




   }



   if (msg.text === '/start') {

     bot.sendSticker(chatId, 'CAACAgIAAxkBAAEIyH5kTfKJfjKEmYHi8CKOq2f7YZupTwACGCUAAn2PcUrNxIKmFCxpby8E')
       .then(

         GetNameDB(chatId).then(telegram => {
           outputdate = DateMod(telegram._doc.BirthDay);
           bot.sendMessage(chatId, `–í—ñ—Ç–∞—é –í–∞—Å, ${telegram.FullName}\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: 0${telegram._doc.Phone}\n–í–∞—à–∞ –¥–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${telegram._doc.BirthDay}`)
             .then(getW(chatId, '–ü—ñ—Å–æ—á–∏–Ω'),

               setTimeout(() => {

                 bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é: üëá', InlineKB);



               }, 500)







             );


         })
         .catch(error => {
           console.log('–ü–æ–º–∏–ª–∫–∞:', error);

           setTimeout(() => {
             bot.sendMessage(chatId, `–í—ñ—Ç–∞—é –í–∞—Å, –®–∞–Ω–æ–≤–Ω–∏–π –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á ${msg.from.first_name}`);


             bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é: üëá', InlineKB);



           }, 500);





         })

       );














   }
   if (msg.text === undefined) {} else if (msg.text.length == 15) {
     const number1 = Number(msg.text);
     if (isNaN(number1) == false) {

       bot.sendMessage(msg.from.id, 'üò∏ –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ –≤–≤–µ–¥–µ–Ω–æ –≤—ñ—Ä–Ω–æ - –ø–æ—á–∏–Ω–∞—é –ø–æ—à—É–∫ –í–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üîç');

       fetch(`${url}/examination/getResultsPDF?ExaminationResultsPDFCode=${msg.text}&ShowOnlyReady=false`, {
           headers: {
             'Authorization': 'Basic TWVkVGVjaHxNZWRUZWNoV2ViOk1lZFRlY2gxMjMh'
           }
         })
         .then(res => res.arrayBuffer())
         .then(buffer => {
           const fileBufferpdf = Buffer.from(buffer);

           bot.sendDocument(msg.from.id, fileBufferpdf, {}, {
             filename: `${msg.text}.pdf`,
             contentType: 'application/pdf'
           });


         })
         .catch(error => console.error(error));

     }
   }




 });




 bot.on('callback_query', (query) => {
   const chatId = query.message.chat.id;
   const data = query.data;

   switch (data) {
     case 'button1':

       bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å 15 –∑–Ω–∞—á–Ω–∏–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –∫–æ–¥ –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ –Ω–∞ –±–ª–∞–Ω–∫—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –≤ —Å–º—Å –≤—ñ–¥ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—ó –ø—Ä–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.', {
         reply_markup: {
           remove_keyboard: true
         }
       });


       break;
     case 'button2':
       BurnTriger = true;
       PhoneTriger = true;
       bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç—ñ –î–î/–ú–ú/–†–†–†–† - –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤–∞—Å –≤ –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—ó MTS Clinic', {
         reply_markup: {
           remove_keyboard: true
         }
       });



       break;
     case 'button3':
       bot.sendMessage(chatId, '–ê–¥—Ä–µ—Å–∞ –º–µ–¥–∏—á–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É MTS Clinic. –º.–ü—ñ—Å–æ—á–∏–Ω, –ù–∞–±–µ—Ä–µ–∂–Ω–∞ 11/1').then(() => {
         bot.sendMessage(chatId, `–ú–æ–±—ñ–ª—å–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω: \n 0932962501\n0960414004\n–ü–æ—Å–ª—É–≥–∏: –∑–∞–±—ñ—Ä –∞–Ω–∞–ª—ñ–∑—ñ–≤, \n–ü—É–Ω–∫—Ç –≤–∞–∫—Ü–∏–Ω–∞—Ü—ñ—ó –≤—ñ–¥ COVID-19.\n`, {
           parse_mode: 'Markdown'
         });
         bot.sendLocation(chatId, 49.962673, 36.09681, {
           reply_markup: {
             remove_keyboard: true
           }
         })





       });



       break;
     case 'button4':

       bot.sendMessage(chatId, '‚û° –í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É —Ñ—ñ–ª—ñ—é:', {
         reply_markup: {
           inline_keyboard: [
             [{
               text: 'üîπ–ü—ñ—Å–æ—á–∏–Ω',
               callback_data: 'PointFence1'
             }, {
               text: 'üîπ–•–æ–ª–æ–¥–Ω–∞ –ì–æ—Ä–∞',
               callback_data: 'PointFence7'
             }],
             [{
               text: 'üîπ–ë–∞–≤–∞—Ä—ñ—è',
               callback_data: 'PointFence2'
             }, {
               text: 'üîπ–õ—é–±–æ—Ç–∏–Ω',
               callback_data: 'PointFence8'
             }],
             [{
               text: "‚ùó–ê–µ—Ä–æ–ø–æ—Ä—Ç (–ø—Ä–∞—Ü—é—î)",
               callback_data: 'PointFence3'
             }, {
               text: "üîπ–•–æ–ª–æ–¥–Ω–∞ –ì–æ—Ä–∞, –ø—É–Ω–∫—Ç ‚Ññ2 ",
               callback_data: 'PointFence9'
             }],
             [{
               text: "üîπ–ü—ñ–≤–¥–µ–Ω–Ω–∏–π –≤–æ–∫–∑–∞–ª",
               callback_data: 'PointFence4'
             }, {
               text: "üîπ–ö–æ–º—É–Ω–∞–ª—å–Ω–∏–π —Ä–∏–Ω–æ–∫",
               callback_data: 'PointFence10'
             }],
             [{
               text: "üîπ–†–æ–≥–∞–Ω—å",
               callback_data: 'PointFence5'
             }, {
               text: "üîπ–•–¢–ó",
               callback_data: 'PointFence11'
             }],
             [{
               text: "‚ùó–°–∞–ª—Ç—ñ–≤–∫–∞ (–ø—Ä–∞—Ü—é—î)",
               callback_data: 'PointFence6'
             }],

           ],

         }
       });


       break;
     case 'button5':

       bot.sendMessage(chatId, 'üíª –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –ø—Ä–∞–π—Å', {
         reply_markup: {
           remove_keyboard: true
         }
       });

       bot.sendDocument(chatId, `C:\\Milamed request analyze\\actualpricemts.xlsx`, {
         caption: '–ê–∫—Ç—É–∞–ª—å–Ω–∏–π –ø—Ä–∞–π—Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—ó Mtsclinic'

       });
       break;
     case 'button6':
       fetch('https://www.mtsclinic.com/_files/ugd/fd4680_7ac7380d6eac480e806fc558e5d80fb9.pdf')
         .then(res => res.arrayBuffer())
         .then(buffer => {
           const fileBuffer = Buffer.from(buffer);
           console.log(fileBuffer);

           bot.sendDocument(chatId, fileBuffer, {
             caption: 'üìã–ê–∫—Ç—É–∞–ª—å–Ω–∏–π –ø—Ä–∞–π—Å –º–µ–¥–∏—á–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É Mtsclinic'

           }, {
             filename: 'Price.pdf',
             contentType: 'application/pdf'
           });
         });

       break;
     case 'button8':
       bot.sendDocument(chatId, `C:\\Telegram\\Priceclinicmilamed.xlsx`, {
         caption: 'üìã–ê–∫—Ç—É–∞–ª—å–Ω–∏–π –ø—Ä–∞–π—Å –º–µ–¥–∏—á–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É Mtsclinic'

       });

       break;
     case 'button9':
       if (actualid == undefined) {} else {
         requestdata(actualid, curyear - 1);
       }

       break;
     case 'button10':
       if (actualid == undefined) {} else {
         requestdata(actualid, curyear);
       }


       break;
     case 'button11':
       if (actualid == undefined) {} else {
         requestdata(actualid, curyear - 2);
       }


       break;
     case 'button12':
       if (actualid == undefined) {} else {
         requestdata(actualid, curyear - 3);
       }


       break;
     case 'button13':
       if (actualid == undefined) {} else {
         requestdata(actualid, curyear, 2010);
       }


       break;

     case 'PointFence1':
       bot.sendMessage(chatId, `üïê<b><u>–ü—ñ—Å–æ—á–∏–Ω.</u></b>` + '—Ç–µ–ª.:(0932962501,0960414004)(Viber,Telegram)\n–ü—É–Ω–∫—Ç –≤–∞–∫—Ü–∏–Ω–∞—Ü—ñ—ó –≤—ñ–¥ COVID-19\n–ê–¥—Ä–µ—Å–∞: –ù–∞–±–µ—Ä–µ–∂–Ω–∞, 11/1\n–ü–Ω-–ü—Ç —Å 08:00-18:00,\n –°–± —Å 08:00-16:00, \n–ù–¥ —Å 08:00-14:00', {
         reply_markup: {
           remove_keyboard: true
         },
         parse_mode: "HTML"
       });
       break;

     case 'PointFence2':

       bot.sendMessage(chatId, `üïê<b><u>–ë–∞–≤–∞—Ä—ñ—è.</u></b>` + '—Ç–µ–ª.: (0932962507)(Viber)\n–ê–¥—Ä–µ—Å–∞: –ø—Ä–æ—Å–ø–µ–∫—Ç –ù–æ–≤–æ-–ë–∞–≤–∞—Ä—Å—å–∫–∏–π, 70\n–ü–Ω-–°–± —Å 08:00-12:00, –ù–¥ (–≤–∏—Ö—ñ–¥–Ω–∏–π)', {
         reply_markup: {
           remove_keyboard: true
         },
         parse_mode: "HTML"
       });
       break;
     case 'PointFence3':
       bot.sendMessage(chatId, `üïê<b><u>–ê–µ—Ä–æ–ø–æ—Ä—Ç.</u></b>` + ' —Ç–µ–ª.:(0932962509)(Viber) (–ó–ù–û–í–£ –ü–†–ê–¶–Æ–Ñ)\n–ê–¥—Ä–µ—Å–∞: –ü—Ä–æ—Å–ø–µ–∫—Ç –ì–∞–≥–∞—Ä–∏–Ω–∞, 316–ë\n–ü–Ω-–ü—Ç —Å 07:30-12:00, –ù–¥ (–≤–∏—Ö—ñ–¥–Ω–∏–π)', {
         reply_markup: {
           remove_keyboard: true
         },
         parse_mode: "HTML"
       });


       break;

     case 'PointFence4':
       bot.sendMessage(chatId, `üïê<b><u>–ü—ñ–≤–¥–µ–Ω–Ω–∏–π –≤–æ–∫–∑–∞–ª.</u></b>` + ' —Ç–µ–ª.:(0932962504)(Viber,Telegram)\n–ê–¥—Ä–µ—Å–∞: –ö–æ—Ç–ª—è—Ä–∞, 12\n–ü–Ω-–°–± —Å 07:30-12:00, –ù–¥ (–≤–∏—Ö—ñ–¥–Ω–∏–π)‚Äã', {
         reply_markup: {
           remove_keyboard: true
         },
         parse_mode: "HTML"
       });

       break;
     case 'PointFence5':
       bot.sendMessage(chatId, `üïê<b><u>–†–æ–≥–∞–Ω—å. </u></b>` + '—Ç–µ–ª.:(0932962505)(Viber)\n–ê–¥—Ä–µ—Å–∞: –°–µ—Ä–≥—ñ—è –ì—Ä–∏—Ü–µ–≤—Ü—è, 9\n–ü–Ω-–°–± —Å 07:30-12:00, –ù–¥ (–≤–∏—Ö—ñ–¥–Ω–∏–π)‚Äã', {
         reply_markup: {
           remove_keyboard: true
         },
         parse_mode: "HTML"
       });

       break;

     case 'PointFence6':
       bot.sendMessage(chatId, `üïê<b><u>–°–∞–ª—Ç—ñ–≤–∫–∞. </u></b>` + '—Ç–µ–ª.:(0932962506)(Viber) (–ó–ù–û–í–£ –ü–†–ê–¶–Æ–Ñ)\n–ê–¥—Ä–µ—Å–∞: –¢—Ä–∞–∫—Ç–æ—Ä–æ–±—É–¥—ñ–≤–Ω–∏–∫—ñ–≤, 160–í\n–ü–Ω-–°–± —Å 07:30-12:00, –ù–¥ (–≤–∏—Ö—ñ–¥–Ω–∏–π)‚Äã', {
         reply_markup: {
           remove_keyboard: true
         },
         parse_mode: "HTML"
       });

       break;

     case 'PointFence7':
       bot.sendMessage(chatId, `üïê<b><u>–•–æ–ª–æ–¥–Ω–∞ –ì–æ—Ä–∞. </u></b>` + '—Ç–µ–ª.:(0932962502)(Viber)\n–ê–¥—Ä–µ—Å–∞: –ü–æ–ª—Ç–∞–≤—Å—å–∫–∏–π —à–ª—è—Ö, 152 (–î–∏—Ç—è—á–∞ –ø–æ–ª—ñ–∫–ª—ñ–Ω—ñ–∫–∞ ‚Ññ19 –∫–∞–±—ñ–Ω–µ—Ç ‚Ññ8)\n–ü–Ω-–°–± —Å 08:00-12:00, –ù–¥ (–≤–∏—Ö—ñ–¥–Ω–∏–π)‚Äã', {
         reply_markup: {
           remove_keyboard: true
         },
         parse_mode: "HTML"
       });

       break;
     case 'PointFence8':
       bot.sendMessage(chatId, `üïê<b><u>–õ—é–±–æ—Ç–∏–Ω. </u></b>` + '—Ç–µ–ª.:(0932962508)(Viber)\n–ê–¥—Ä–µ—Å–∞: –®–µ–≤—á–µ–Ω–∫–∞, 15 (–∫–∞–±. 2) (–ú—ñ—Å—å–∫–∞ –ø–æ–ª—ñ–∫–ª—ñ–Ω—ñ–∫–∞)\n–ü–Ω-–°–± —Å 08:00-12:00, –ù–¥ (–≤–∏—Ö—ñ–¥–Ω–∏–π)‚Äã', {
         reply_markup: {
           remove_keyboard: true
         },
         parse_mode: "HTML"
       });

       break;
     case 'PointFence9':
       bot.sendMessage(chatId, `üïê<b><u>–•–æ–ª–æ–¥–Ω–∞ –ì–æ—Ä–∞. </u></b>` + ' —Ç–µ–ª.:(0637078733)(Viber)\n–ê–¥—Ä–µ—Å–∞: –î—É–¥–∏–Ω—Å—å–∫–æ—ó, 1–∞\n–ü–Ω-–°–± —Å 07:30-12:00, –ù–¥ (–≤–∏—Ö—ñ–¥–Ω–∏–π)‚Äã‚Äã', {
         reply_markup: {
           remove_keyboard: true
         },
         parse_mode: "HTML"
       });

       break;
     case 'PointFence10':
       bot.sendMessage(chatId, `üïê<b><u>–ö–æ–º—É–Ω–∞–ª—å–Ω–∏–π —Ä–∏–Ω–æ–∫. </u></b>` + '—Ç–µ–ª.:(0932962513)(Viber)\n–ê–¥—Ä–µ—Å–∞: –õ—å–≤–∞ –õ–∞–Ω–¥–∞—É, 8\n(–ø—Ä–∞—Ü—é—î –∑–∞ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–º –≥—Ä–∞—Ñ—ñ–∫–æ–º)‚Äã', {
         reply_markup: {
           remove_keyboard: true
         },
         parse_mode: "HTML"
       });

       break;
     case 'PointFence11':
       bot.sendMessage(chatId, `üïê<b><u>–•–¢–ó. </u></b>` + ' —Ç–µ–ª.:(932962510)(Viber)\n–ê–¥—Ä–µ—Å–∞: –ø—Ä-—Ç. –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤—Å—å–∫–∏–π, 124\n–ü–Ω-–°–± —Å 07:30-12:00, –ù–¥ (–≤–∏—Ö—ñ–¥–Ω–∏–π)‚Äã', {
         reply_markup: {
           remove_keyboard: true
         },
         parse_mode: "HTML"
       })

       break;
     case 'PointFence12':
       bot.sendMessage(chatId, "–ú–æ–±—ñ–ª—å–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω:\n0961912392\n–ü–æ—Å–ª—É–≥–∏: –∑–∞–±—ñ—Ä –∞–Ω–∞–ª—ñ–∑—ñ–≤,\n–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏: –ø–æ–Ω–µ–¥—ñ–ª–æ–∫-–ø‚Äô—è—Ç–Ω–∏—Ü—è 08:30-15:00\n—Å—É–±–æ—Ç–∞, –Ω–µ–¥—ñ–ª—è-–≤–∏—Ö—ñ–¥–Ω–∏–π\n    \n–ü–æ—Å–ª—É–≥–∏ :–£–ó–î.\n–ú–æ–±—ñ–ª—å–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω: 0964721455\n–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏: –ø–æ–Ω–µ–¥—ñ–ª–æ–∫-–ø‚Äô—è—Ç–Ω–∏—Ü—è 08:00-16:00\n—Å—É–±–æ—Ç–∞, –Ω–µ–¥—ñ–ª—è-–≤–∏—Ö—ñ–¥–Ω–∏–π\n", {
         parse_mode: 'HTML'
       });

       break;

     case 'homeorder':
       const now = new Date();
       let day = now.getDay();
       if (day != 0 && day != 6) {
         getWorkperiodstatus = isWorkingTime('8:00', '18:00'); //18:00
       } else if (day == 6) {
         getWorkperiodstatus = isWorkingTime('8:00', '16:00');
       } else {
         getWorkperiodstatus = false;
       }


       if (getWorkperiodstatus) {

         bot.sendMessage(chatId, `üí≥ –í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Å–ª—É–≥–∏ –≤ –º–µ–∂–∞—Ö –º.–ü—ñ—Å–æ—á–∏–Ω 150 –≥—Ä–Ω.\n –ó–∞ –º–µ–∂—ñ –º—ñ—Å—Ç–∞ - —Ü—ñ–Ω–∞ —ñ–Ω–¥–∏–≤—ñ–¥—É–ª—å–Ω–∞ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –∫—ñ–Ω—Ü–µ–≤–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ –ø–æ—Å–ª—É–≥ —Ç–∞–∫—Å—ñ.\n      \n üìù –ë—É–¥—å-–ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫—É –∞–Ω–∫–µ—Ç—É —ñ –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—î –í–∞–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —â–æ–¥–æ –º—ñ—Å—Ü—è –π —á–∞—Å—É –∑–∞–±–æ—Ä—É —Ç–∞ –∫—ñ–Ω—Ü–µ–≤–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ –¥–∞–Ω–æ—ó –ø–æ—Å–ª—É–≥–∏.`);

         setTimeout(() => {


           bot.sendMessage(chatId, '‚ùì –í–∞—à–µ –Ü–º\'—è', {
               reply_markup: {
                 force_reply: true
               }
             })
             .then((sent) => {
               messageid = sent.message_id;
               bot.onReplyToMessage(chatId, messageid, (reply) => {
                 namer = reply.text;
                 console.log(namer);

                 bot.sendMessage(chatId, `üì±–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω. –ü—Ä–∏–∫–ª–∞–¥: 0501234567`, {
                   reply_markup: {
                     force_reply: true // –ó–∞–ø–∏—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                   }
                 }).then((sent) => {
                   messageid = sent.message_id;
                   bot.onReplyToMessage(chatId, messageid, (reply) => {
                     orderphone = reply.text;
                     console.log(orderphone);
                     bot.sendMessage(chatId, 'üíÅ‚Äç‚ôÄÔ∏è–î–µ –í–∞–º –∑—Ä—É—á–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–ª—É–≥—É. –ù–∞–ø–∏—à—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ (–º—ñ—Å—Ç–æ/–≤—É–ª–∏—Ü—è/–Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É/–∫–≤–∞—Ä—Ç–∏—Ä–∏)', {
                       reply_markup: {
                         force_reply: true
                       }
                     }).then((sent) => {
                       messageid = sent.message_id;

                       bot.onReplyToMessage(chatId, messageid, (reply) => {
                         homeadress = reply.text;
                         console.log(homeadress);

                         bot.sendMessage(chatId, 'üôè–ö–æ–ª–∏ –í–∞–º –∑—Ä—É—á–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–ª—É–≥—É. –ù–∞–ø–∏—à—ñ—Ç—å –±–∞–∂–∞–Ω—É –¥–∞—Ç—É –≤–∏–∫–ª–∏–∫—É —ñ —á–∞—Å –≤ —Ñ–æ—Ä–º–∞—Ç—ñ (–î–î.–ú–ú.–†–†–†–†-–ì–ì.–•–•)', {
                           reply_markup: {
                             force_reply: true
                           }
                         }).then((sent) => {
                           messageid = sent.message_id;

                           bot.onReplyToMessage(chatId, messageid, (reply) => {
                             const ordertime = reply.text;
                             console.log(ordertime);
                             let todayfile = new Date();
                             const formattedDate = todayfile.toLocaleString('uk-UA', {
                               year: 'numeric',
                               month: '2-digit',
                               day: '2-digit',
                               hour: '2-digit',
                               minute: '2-digit',
                               second: '2-digit',
                               hour12: false
                             });
                             const ordernum = randomize();



                             if (orderphone.length == 10) {

                               GetNameDB(chatId).then(telegram => {
                                     outputdate = DateMod(telegram._doc.BirthDay);
                                     bot.sendMessage(chatId, `–í—ñ—Ç–∞—é –í–∞—Å, ${telegram.FullName}\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: 0${telegram._doc.Phone}\n–í–∞—à–∞ –¥–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${telegram._doc.BirthDay}`);


                                     bot.sendMessage(chatId, `${ordernum}\n–î—è–∫—É—é, ${telegram.FullName}. –í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —ñ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ–º—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—É.\n –ß–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å –∑ –í–∞–º–∏ –∑–≤—è–∂—É—Ç—å—Å—è —â–æ–¥–æ —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π. `)
                                       .then(




                                         fs.appendFile('./bot_logmts.txt', `[${todayfile}]\n–ù–∞–¥—ñ–π—à–ª–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ–µ–Ω—Ç–∞ –Ω–∞ –∑–∞–±—ñ—Ä –∫—Ä–æ–≤—ñ –Ω–∞ –¥–æ–º—É\n${ordernum}\n–Ü–º\'—è: ${namer}\n–¢–µ–ª–µ—Ñ–æ–Ω:  ${orderphone}\n–ê–¥—Ä–µ—Å–∞ –≤–∏–∫–ª–∏–∫—É: ${homeadress}\n–ë–∞–∂–∞–Ω–∞ –¥–∞—Ç–∞ —Ç–∞ —á–∞—Å: ${ordertime}\n–ó–Ω–∞–π–¥–µ–Ω–µ –ø–æ–≤–Ω–µ –Ü–º\'—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö:  ${telegram.FullName}`, (err) => {
                                           if (err) throw err;
                                           bot.sendMessage(-813260675, `–ù–∞–¥—ñ–π—à–ª–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ–µ–Ω—Ç–∞ –Ω–∞ –∑–∞–±—ñ—Ä –∫—Ä–æ–≤—ñ –Ω–∞ –¥–æ–º—É\n<b>${ordernum}</b>\n     \n–Ü–º\'—è: ${namer}\n–¢–µ–ª–µ—Ñ–æ–Ω: <b> ${orderphone}</b>\n–ê–¥—Ä–µ—Å–∞ –≤–∏–∫–ª–∏–∫—É: ${homeadress}\n–ë–∞–∂–∞–Ω–∞ –¥–∞—Ç–∞ —Ç–∞ —á–∞—Å: ${ordertime}\n \n–ó–Ω–∞–π–¥–µ–Ω–µ –ø–æ–≤–Ω–µ –Ü–º\'—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö:  ${telegram.FullName}\n       \n<b>–ù–∞–≥–∞–¥—É—é –ø—Ä–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ –ø–µ—Ä–µ–¥–∑–≤–æ–Ω–∏—Ç–∏ –∫–ª—ñ–µ–Ω—Ç—É –¥–ª—è –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è.</b> `, {
                                             parse_mode: 'HTML'
                                           })
                                           console.log('–î–∞–Ω—ñ –±—É–ª–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–ø–∏—Å–∞–Ω—ñ –≤ –∫—ñ–Ω–µ—Ü—å —Ñ–∞–π–ª—É');
                                         })


                                       );



                                   }



                                 )

                                 .catch(err => {
                                   trimmedStr = '–®–∞–Ω–æ–≤–Ω–∏–π –∫–ª—ñ–µ–Ω—Ç, —â–æ –æ–±–∏—Ä–∞—î—Ç–µ –Ω–∞—Å.';
                                   bot.sendMessage(chatId, `${ordernum}\n–î—è–∫—É—é, ${trimmedStr}. –í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —ñ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ–º—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—É.\n –ß–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å –∑ –í–∞–º–∏ –∑–≤—è–∂—É—Ç—å—Å—è —â–æ–¥–æ —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π. `)

                                   bot.sendMessage(-813260675, `–ù–∞–¥—ñ–π—à–ª–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ–µ–Ω—Ç–∞ –Ω–∞ –∑–∞–±—ñ—Ä –∫—Ä–æ–≤—ñ –Ω–∞ –¥–æ–º—É\n<b>${ordernum}</b>\n     \n–Ü–º\'—è: ${namer}\n–¢–µ–ª–µ—Ñ–æ–Ω: <b> ${orderphone}</b>\n–ê–¥—Ä–µ—Å–∞ –≤–∏–∫–ª–∏–∫—É: ${homeadress}\n–ë–∞–∂–∞–Ω–∞ –¥–∞—Ç–∞ —Ç–∞ —á–∞—Å: ${ordertime}\n       \n<b>–ù–∞–≥–∞–¥—É—é –ø—Ä–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ –ø–µ—Ä–µ–¥–∑–≤–æ–Ω–∏—Ç–∏ –∫–ª—ñ–µ–Ω—Ç—É –¥–ª—è –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è.</b> `, {
                                     parse_mode: 'HTML'
                                   })

                                 });
                             } else {
                               bot.sendMessage(chatId, '–ù–æ–º–µ—Ä –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ –≤—ñ—Ä–Ω–æ. –î–æ–≤–∂–∏–Ω–∞ –Ω–æ–º–µ—Ä—É –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ 10 —Ü–∏—Ñ—Ä. \n –ü–æ—á–Ω—ñ—Ç—å –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–ø–æ—á–∞—Ç–∫—É - —á–µ—Ä–µ–∑ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é. –î—è–∫—É—î–º–æ –∑–∞ –ø–æ—Ä–æ–∑—É–º—ñ–Ω–Ω—è');
                             }






                           });



                         });


                       });


                     });


                   });


                 });


               });

             });




         }, 1000);





       } else {
         bot.sendMessage(chatId, 'üò™ –ú–∏, –Ω–∞—Ä–∞–∑—ñ –∑–∞—á–∏–Ω–µ–Ω—ñ. –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –ª–∏—à–µ –≤ —Ä–æ–±–æ—á–∏–π —á–∞—Å.');
       };


       break;

     case 'monitor':

       BurnTriger = false;
       PhoneTriger = false;
       GetNameDB(chatId)
         .catch(err => {
           console.log(`{–•–∞—Ö–∞ —è —Ç—É—Ç ${err}}`);

           //GetPackResults(telegram._doc.BirthDay,phone,GetPeriodBack(100),GetCurDay())





         })
         .then(telegram => {
           outputdate = DateMod(telegram._doc.BirthDay);
           bot.sendMessage(chatId, `–í—ñ—Ç–∞—é –í–∞—Å, ${telegram.FullName}\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: 0${telegram._doc.Phone}\n–í–∞—à–∞ –¥–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${telegram._doc.BirthDay} `)
             .then(bot.sendMessage(chatId, '–ó–∞–ø—É—Å–∫–∞—é —Å–∏—Å—Ç–µ–º—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—ó. –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω —Å—Ç–∞—Ç—É—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –¥–æ—Å–ª—ñ–¥–∂–µ–Ω—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —â–æ 15 —Ö–≤.', {
                 reply_markup: {
                   keyboard: [
                     [{
                       text: '–ó—É–ø–∏–Ω–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥',
                       request_contact: false,



                     }, ]
                   ],
                   resize_keyboard: false

                 }
               })
               .then(data => {

                 if ((chatId in intervals) == false) {


                   intervalId = setInterval(() => {


                     const currentTime = new Date();

                     // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∂–∞–Ω–æ–≥–æ —á–∞—Å—É
                     const desiredTime = new Date();
                     desiredTime.setHours(23);
                     desiredTime.setMinutes(59);

                     // –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≥–æ–¥–∏–Ω
                     if (currentTime <= desiredTime) {
                       console.log('–ß–∞—Å –º–µ–Ω—à–∏–π –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î 23:59');
                       GetPackResults(telegram._doc.BirthDay, telegram._doc.Phone, GetPeriodBack(100), GetCurDay())
                         .then(response => {

                           if (response.ok) {
                             response.json()
                               .then(data => {
                                 console.log(data);

                                 if (data.length == 0) {
                                   bot.sendMessage(chatId, '–£ –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∞–ª—ñ–∑—ñ–≤ –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –ø–µ—Ä—ñ–æ–¥—ñ.');
                                   stopInterval(chatId);
                                 }
                                 for (let i = 0; i < data.length; i++) {
                                   const resarray = data[i];
                                   isAlreadySent = false;
                                   for (let j = 0; j < ArrayCheckAnalyze.length; j++) {
                                     if (resarray.Docstatus == '—Å–∫–∞—Å–æ–≤–∞–Ω–æ') {
                                       continue;
                                     }
                                     const item = ArrayCheckAnalyze[j];
                                     if (resarray.WebCode == item) {
                                       console.log(`–¶—ñ –¥–∞–Ω—ñ —è –≤–∂–µ –ø–µ—Ä–µ–¥–∞–≤: ${resarray.WebCode}`);
                                       isAlreadySent = true;
                                       //break;
                                     }
                                   }
                                   if (!isAlreadySent) {
                                     if (resarray.Docstatus == '–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ') {
                                       if (ArrayCheckAnalyze.length >= 0) {
                                         bot.sendMessage(chatId, `–ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –≤ —Å—Ç–∞—Ç—É—Å—ñ: ${resarray.Docstatus}. –ù–∞–¥—Å–∏–ª–∞—é –π–æ–≥–æ –í–∞–º`)
                                           .then(ArrayCheckAnalyze.push(resarray.WebCode));
                                       }


                                       GetPdfCode(chatId, resarray.WebCode, data.length);
                                     } else {
                                       if (ii == true) {




                                         setTimeout(() => {
                                           if (resarray.Docstatus != '—Å–∫–∞—Å–æ–≤–∞–Ω–æ') {
                                             bot.sendMessage(chatId, `–¢–∞–∫–æ–∂ –∑–Ω–∞–π–¥–µ–Ω–æ  –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –≤ —Å—Ç–∞—Ç—É—Å—ñ: ${resarray.Docstatus}. –û—á—ñ–∫—É–π—Ç–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è`, {
                                               reply_markup: {
                                                 remove_keyboard: false
                                               }
                                             });
                                           }
                                         }, 6000);
                                         ii = false;




                                       }
                                     }

                                   }
                                 }






                               });
                           }
                         });

                     } else {
                       stopInterval(chatId);
                       console.log('–ß–∞—Å –±—ñ–ª—å—à–∏–π –∑–∞ 23:59');
                       bot.sendMessage(chatId, '–ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ—ó –¥–æ–±–∏. –î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –ø–æ—Å–ª—É–≥—É –≤ –Ω–æ–≤—ñ–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ñ–π –¥–æ–±—ñ.');
                     }


                     // telegram._doc.BirthDay,telegram._doc.Phone,'01-01-2023','12-21.2023'
                   }, timepause);
                   intervals[chatId] = intervalId;



                 } else {
                   bot.sendMessage(chatId, `–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ.`);
                 }
               })







             );

         })
         .catch(err => {
           bot.sendMessage(chatId, '–£ –º–µ–Ω–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ –í–∞—Å. –î–ª—è –∑–∞–ø—É—Å–∫—É –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω–Ω—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—å, –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥ –í–∞—Å, –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —ñ –í–∞—à –Ω–æ–º–µ—Ä –º–æ–±—ñ–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É, —è–∫–∏–π –í–∏ —Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—ó', GetKeybNull);



         });









       break;



     case 'question':
       const nowq = new Date();
       let dayq = nowq.getDay();
       if (dayq != 0 && dayq != 6) {
         getWorkperiodstatus = isWorkingTime('08:00', '18:00'); //18:00
       } else if (dayq == 6) {
         getWorkperiodstatus = isWorkingTime('08:00', '16:00');
       } else {
         getWorkperiodstatus = false;
       }


       if (getWorkperiodstatus) {

         bot.sendMessage(chatId, `–í—ñ—Ç–∞—é –í–∞—Å, –ø–æ—Å—Ç–∞–≤—Ç–µ –Ω–∞–º –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –æ–∑–≤—É—á—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∑ —è–∫–æ—é –í–∏ –∑—ñ—Ç–∫–Ω—É–ª–∏—Å—å –≤ –Ω–∞—à—ñ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—ó. –Ü –º–∏ –≤ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —á–∞—Å –∑–≤—è–∂–µ–º–æ—Å—è –∑ –í–∞–º–∏`, {
             reply_markup: {
               force_reply: true
             }
           })
           .then((sent) => {

             if (phone == undefined) {
               bot.sendMessage(chatId, `–î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ—î—é, –Ω–∞–¥–∞–π—Ç–µ –¥–æ–∑–≤—ñ–ª –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –í–∞—à–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É, —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ [–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É] —ñ –ø–æ—Ç—ñ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—É–Ω–∫—Ç 10. \n–¢–∞–∫–æ–∂, –í–∏ –∑–º–æ–∂–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ —Å–≤–æ—é –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –í–∞—Å –≤ –Ω–∞—à—ñ–π –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö , —è–∫ –Ω–∞—à–æ–≥–æ –∫–ª—ñ–µ–Ω—Ç–∞. –î—è–∫—É—é `, {
                 reply_markup: {
                   keyboard: [
                     [{
                       text: '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É',
                       request_contact: true,




                       // –í–º–∏–∫–∞—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É
                     }]


                   ],

                   resize_keyboard: false

                   // –í–º–∏–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–º–µ–Ω—à–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
                 }
               });
             } else {
               bot.onReplyToMessage(chatId, sent.message_id, (reply) => {
                 namer = reply.text;
                  if (namer == '/start' || namer == undefined || namer.length ==0){bot.sendMessage(chatId,'–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–µ–∫—Å—Ç');}else{
                 bot.sendMessage(chatId, `–í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.`);
                 //  bot.sendMessage(chatId,namer).then((sent)=>{ bot.forwardMessage(-813260675, chatId, sent.message_id); } );

                 bot.sendMessage(-813260675, `–ù–∞–¥—ñ–π—à–ª–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ ${sent.chat.first_name}\n     \n–¢–µ–∫—Å—Ç –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:\n ${namer}\n –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${phone}    \n<b>–ù–∞–≥–∞–¥—É—é –ø—Ä–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ –ø–µ—Ä–µ–¥–∑–≤–æ–Ω–∏—Ç–∏ –∫–ª—ñ–µ–Ω—Ç—É –¥–ª—è –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è.</b> `, {
                   parse_mode: 'HTML'
                 });
               }});
             }
           });

       } else {
         bot.sendMessage(chatId, 'üò™ –ú–∏, –Ω–∞—Ä–∞–∑—ñ –∑–∞—á–∏–Ω–µ–Ω—ñ. –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –ª–∏—à–µ –≤ —Ä–æ–±–æ—á–∏–π —á–∞—Å.');
       }


       break;













     default:
       break;
   }
 });